# -*- mode:Shell-script -*-

AC_PREREQ(2.59)

AC_INIT
AC_CONFIG_SRCDIR([configure.in])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_HEADER([config.h])
AC_HEADER_ASSERT
#AC_DISABLE_SHARED
MELY_MAJOR_VERSION=0
MELY_MINOR_VERSION=0
MELY_MICRO_VERSION=1
VERSION=$MELY_MAJOR_VERSION.$MELY_MINOR_VERSION.$MELY_MICRO_VERSION${SNAPSHOT:+.$SNAPSHOT}
# +1 : ? : +1  == new interface that does not break old one
# +1 : ? : 0   == new interface that breaks old one
#  ? : ? : 0   == no new interfaces, but breaks apps
#  ? :+1 : ?   == just some internal changes, nothing breaks but might work 
#                 better
# CURRENT : REVISION : AGE
# VERSION=1:0:0

AC_SUBST(MELY_MAJOR_VERSION)
AC_SUBST(MELY_MINOR_VERSION)
AC_SUBST(MELY_MICRO_VERSION)
AC_SUBST(VERSION)

AM_INIT_AUTOMAKE("mely", $VERSION)

AC_CANONICAL_HOST

# Need this to get pthread etc.
AC_DEFINE(_GNU_SOURCE,1,"POSIXandGNU extensions")

#####################
# Checks for programs
#.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

# platform idioms

# if test "x$GCC" = "xyes"; then
#   case " $CFLAGS " in
#   *[\ \	]-Wall[\ \	]*) ;;
#   *) CFLAGS="$CFLAGS -Wall" ;;
#   esac
# fi

#CPPFLAGS="$CPPFLAGS -O2 -Wno-write-strings -g -Wall -Werror"
CPPFLAGS="$CPPFLAGS -O2 -Wno-write-strings"
CPPFLAGS="$CPPFLAGS -DUSE_STL -D_GNU_SOURCE -D__USE_GNU"

#CPPFLAGS="$CPPFLAGS -DSYSTEM_INFO -DRUNTIME_INFO -D_GLIBCXX_DEBUG"

#LIBS="$LIBS -ltcmalloc"
LIBS="$LIBS -lpapi -lrt"

#AC_DEFINE(USE_REFCOUNT, [0], [Define to 1 if the system supports refcount])


####################
# NB_THREADS support
####################

# add checking message
AC_MSG_CHECKING(change the number of threads (for debugging purposes))

# create configure parameter and init variable $profiling
nthreads=
AC_ARG_ENABLE(nthreads,
	AC_HELP_STRING(
	    [--enable-nthreads],
	    [set nb threads [default=]]
	),
  	nthreads="$enableval"
)

# resulting value to screen (to complete checking message)
AC_MSG_RESULT($nthreads)

# set DEBUG flag and introduce additional compiler flags
if ! test x"$nthreads" = x""; 
then
    CXXFLAGS="$CXXFLAGS -DNB_THREADS=$nthreads"
fi

#######################################################################################
# GZIP support for sws
#######################################################################################

# add checking message
AC_MSG_CHECKING(whether to build with gzip support for sws)

# create configure parameter and init variable $profiling
gzip=no
AC_ARG_ENABLE(gzip,
	AC_HELP_STRING(
	    [--enable-gzip],
	    [enable gzip [default=no]]
	),
  	gzip="$enableval"
)

# resulting value to screen (to complete checking message)
AC_MSG_RESULT($gzip)

# set DEBUG flag and introduce additional compiler flags
if test x"$gzip" = x"yes"; then
    AC_DEFINE(GZIP, [1], [Define to 1 to compile in profiling information])
    SWS_CPPFLAGS="-DUSE_GZIP"
    AM_CONDITIONAL(WANT_GZIP, true)
else
    SWS_CPPFLAGS="$SWS_CFLAGS -DUSE_GZIP=0"
    AM_CONDITIONAL(WANT_GZIP, false)
fi

AC_SUBST(SWS_CPPFLAGS)

#######################################################################################
# DEBUG INFO
#######################################################################################

# add checking message
AC_MSG_CHECKING(whether to build with debug information)

# create configure parameter and init variable $debuger
debuger=no
AC_ARG_ENABLE(debug,
	AC_HELP_STRING(
	    [--enable-debug],
	    [enable debug data generation [default=no]]
	),
  	debuger="$enableval"
)

# resulting value to screen (to complete checking message)
AC_MSG_RESULT($debuger)

# set DEBUG flag and introduce additional compiler flags
if test x"$debuger" = x"yes"; then
      AC_DEFINE(DEBUG, [1], [Define to 1 to compile in debug information])
	CXXFLAGS="$CXXFLAGS -DSYSTEM_INFO -DRUNTIME_INFO -D_GLIBCXX_DEBUG"
fi	

#######################################################################################
# PROFILING INFO
#######################################################################################

# add checking message
AC_MSG_CHECKING(whether to build with profiling information)

# create configure parameter and init variable $profiling
profiling=no
AC_ARG_ENABLE(profiling,
	AC_HELP_STRING(
	    [--enable-profiling],
	    [enable profiling [default=no]]
	),
  	profiling="$enableval"
)

# resulting value to screen (to complete checking message)
AC_MSG_RESULT($profiling)

# set DEBUG flag and introduce additional compiler flags
if test x"$profiling" = x"yes"; then
      AC_DEFINE(PROFILING_SUPPORT, [1], [Define to 1 to compile in profiling information])
      	CXXFLAGS="$CXXFLAGS -DPROFILING_SUPPORT" # Necessary #
	CXXFLAGS="$CXXFLAGS -DTRACE_WORKSTEALING"
	CXXFLAGS="$CXXFLAGS -DTRACE_CONTENTION"
	#CXXFLAGS="$CXXFLAGS -DTRACE_REGISTER_TASK"
	#CXXFLAGS="$CXXFLAGS -DTRACE_THREAD_WAKEUP"
	#CXXFLAGS="$CXXFLAGS -DTRACE_THREAD_SLEEP_TIME"
	#CXXFLAGS="$CXXFLAGS -DTRACE_NB_COLORS_BETWEEN_SELECT"
	#CXXFLAGS="$CXXFLAGS -DTRACE_CHOOSE_TASK"
	#CXXFLAGS="$CXXFLAGS -DTRACE_BATCH_ENQUEUE"
	#CXXFLAGS="$CXXFLAGS -DTRACE_BATCH_DEQUEUE"
	#CXXFLAGS="$CXXFLAGS -DPRODUCE_GANTT_DIAGRAM"
	#CXXFLAGS="$CXXFLAGS -DTRACE_SCHEDLING"
	
	##Core.C profiling
	#CXXFLAGS="$CXXFLAGS -DPROFILE_CORE_LOCK"
	#CXXFLAGS="$CXXFLAGS -DPROFILE_CORE_EPOLL"
	
	##Trace nb following tasks of same color executed:
	#CXXFLAGS="$CXXFLAGS -DTRACE_COLOR_BATCHING"
	
	##Trace on which thread a handler has been executed:
	CXXFLAGS="$CXXFLAGS -DTRACE_MAPPING"
	CXXFLAGS="$CXXFLAGS -DTRACE_MAPPING_WS" #TRACE_MAPPING MUST BE ENABLE 
fi


#######################################################################################
# Test for pthread and enable rollingfile code which depends on that
# if we find it
#######################################################################################

AC_CHECK_HEADER(pthread.h,[
        AC_CHECK_LIB(pthread,pthread_mutex_init,[
                LIBS="$LIBS -lpthread"
                AC_DEFINE([WITH_ROLLINGFILE], [], [Define if we found pthread.h libpthread])
                AC_MSG_NOTICE([Compile with rollingfile code])
                with_rollingfile=true],[AC_MSG_NOTICE([No pthread--not compiling rollingfile code])]
                )
])
AM_CONDITIONAL(WITH_ROLLINGFILE, test "$with_rollingfile" = "true")

#####################################
# Checks for header files.
#
#AC_HEADER_STDC

AC_CHECK_HEADERS([ \
    arpa/inet.h \
    errno.h \
    fcntl.h \
    getopt.h \
    locale.h \
    netdb.h \
    sys/socket.h \
    netinet/in.h \
    pthread.h \
    stdarg.h \
    stdlib.h \
    stdio.h \
    string.h \
    strings.h \
    stropts.h \
    sys/lock.h \
    syslog.h \
    unistd.h \
    ])

# OPTIONS TO OPTIMIZE THE COMPILER
#OPTIM="-O2"
#AC_SUBST(OPTIM)

#CFLAGS="CFLAGS -pedantic"

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset munmap strdup strerror strncasecmp strrchr strstr strnstr])

# Checks for macro va_copy
AC_MSG_CHECKING(for va_copy)
AC_TRY_LINK([
	#include <stdarg.h>
], [
	va_list ap;
	va_list ap_copy;
	va_copy(ap, ap_copy);
], [
	AC_MSG_RESULT(yes)
	AC_DEFINE([HAVE_VA_COPY], [1], [Define to 1 if VA_COPY is defined.])
], [
	AC_MSG_RESULT(no)
])

###################
AC_CHECK_TOOL([STRIP],[strip])
AC_OUTPUT(Makefile \
src/Makefile \
src/mely/Makefile \
src/apps/Makefile \
src/apps/echo_server/Makefile \
src/apps/simple_webserver/Makefile \
src/apps/simple_webserver/zlib/Makefile
)
